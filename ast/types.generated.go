// Code generated by gen-ast-types. DO NOT EDIT.

package ast

import (
	"errors"
	"github.com/nanmu42/bluelox/token"
)

type Expression interface {
	Accept(visitor Visitor) (err error)
}

type Visitor interface {
	VisitBinary(v *Binary) (err error)
	VisitGrouping(v *Grouping) (err error)
	VisitLiteral(v *Literal) (err error)
	VisitUnary(v *Unary) (err error)
}

type StubVisitor struct{}

var _ Visitor = StubVisitor{}

func (s StubVisitor) VisitBinary(_ *Binary) error {
	return errors.New("visit func for Binary is not implemented")
}

func (s StubVisitor) VisitGrouping(_ *Grouping) error {
	return errors.New("visit func for Grouping is not implemented")
}

func (s StubVisitor) VisitLiteral(_ *Literal) error {
	return errors.New("visit func for Literal is not implemented")
}

func (s StubVisitor) VisitUnary(_ *Unary) error {
	return errors.New("visit func for Unary is not implemented")
}

type Binary struct {
	Left  Expression
	Token token.Token
	Right Expression
}

var _ Expression = (*Binary)(nil)

func (b *Binary) Accept(visitor Visitor) (err error) {
	return visitor.VisitBinary(b)
}

type Grouping struct {
	Expr Expression
}

var _ Expression = (*Grouping)(nil)

func (b *Grouping) Accept(visitor Visitor) (err error) {
	return visitor.VisitGrouping(b)
}

type Literal struct {
	Value interface{}
}

var _ Expression = (*Literal)(nil)

func (b *Literal) Accept(visitor Visitor) (err error) {
	return visitor.VisitLiteral(b)
}

type Unary struct {
	Operator token.Token
	Right    Expression
}

var _ Expression = (*Unary)(nil)

func (b *Unary) Accept(visitor Visitor) (err error) {
	return visitor.VisitUnary(b)
}

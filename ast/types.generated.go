// Code generated by gen-ast-exprTypes. DO NOT EDIT.

package ast

import (
	"errors"
	"github.com/nanmu42/bluelox/token"
)

type Expression interface {
	Accept(visitor ExprVisitor) (result interface{}, err error)
}

type ExprVisitor interface {
	VisitBinaryExpr(v *BinaryExpr) (result interface{}, err error)
	VisitGroupingExpr(v *GroupingExpr) (result interface{}, err error)
	VisitLiteralExpr(v *LiteralExpr) (result interface{}, err error)
	VisitUnaryExpr(v *UnaryExpr) (result interface{}, err error)
}

type StubExprVisitor struct{}

var _ ExprVisitor = StubExprVisitor{}

func (s StubExprVisitor) VisitBinaryExpr(_ *BinaryExpr) (interface{}, error) {
	return nil, errors.New("visit func for BinaryExpr is not implemented")
}

func (s StubExprVisitor) VisitGroupingExpr(_ *GroupingExpr) (interface{}, error) {
	return nil, errors.New("visit func for GroupingExpr is not implemented")
}

func (s StubExprVisitor) VisitLiteralExpr(_ *LiteralExpr) (interface{}, error) {
	return nil, errors.New("visit func for LiteralExpr is not implemented")
}

func (s StubExprVisitor) VisitUnaryExpr(_ *UnaryExpr) (interface{}, error) {
	return nil, errors.New("visit func for UnaryExpr is not implemented")
}

type BinaryExpr struct {
	Left     Expression
	Operator token.Token
	Right    Expression
}

var _ Expression = (*BinaryExpr)(nil)

func (b *BinaryExpr) Accept(visitor ExprVisitor) (result interface{}, err error) {
	return visitor.VisitBinaryExpr(b)
}

type GroupingExpr struct {
	Expr Expression
}

var _ Expression = (*GroupingExpr)(nil)

func (b *GroupingExpr) Accept(visitor ExprVisitor) (result interface{}, err error) {
	return visitor.VisitGroupingExpr(b)
}

type LiteralExpr struct {
	Value interface{}
}

var _ Expression = (*LiteralExpr)(nil)

func (b *LiteralExpr) Accept(visitor ExprVisitor) (result interface{}, err error) {
	return visitor.VisitLiteralExpr(b)
}

type UnaryExpr struct {
	Operator token.Token
	Right    Expression
}

var _ Expression = (*UnaryExpr)(nil)

func (b *UnaryExpr) Accept(visitor ExprVisitor) (result interface{}, err error) {
	return visitor.VisitUnaryExpr(b)
}

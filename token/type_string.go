// Code generated by "stringer -type Type"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SingleCharacterTokenStart-0]
	_ = x[LeftParen-1]
	_ = x[RightParen-2]
	_ = x[LeftBrace-3]
	_ = x[RightBrace-4]
	_ = x[Comma-5]
	_ = x[Dot-6]
	_ = x[Minus-7]
	_ = x[Plus-8]
	_ = x[Semicolon-9]
	_ = x[Slash-10]
	_ = x[Star-11]
	_ = x[SingleCharacterTokenEnd-12]
	_ = x[OneOrTwoCharacterTokenStart-13]
	_ = x[Bang-14]
	_ = x[BangEqual-15]
	_ = x[Equal-16]
	_ = x[EqualEqual-17]
	_ = x[Greater-18]
	_ = x[GreaterEqual-19]
	_ = x[Less-20]
	_ = x[LessEqual-21]
	_ = x[OneOrTwoCharacterTokenEnd-22]
	_ = x[LiteralStart-23]
	_ = x[Identifier-24]
	_ = x[String-25]
	_ = x[Number-26]
	_ = x[LiteralEnd-27]
	_ = x[KeywordStart-28]
	_ = x[And-29]
	_ = x[Class-30]
	_ = x[Else-31]
	_ = x[False-32]
	_ = x[Fun-33]
	_ = x[For-34]
	_ = x[If-35]
	_ = x[Nil-36]
	_ = x[Or-37]
	_ = x[Print-38]
	_ = x[Return-39]
	_ = x[Super-40]
	_ = x[This-41]
	_ = x[True-42]
	_ = x[Var-43]
	_ = x[While-44]
	_ = x[KeywordEnd-45]
	_ = x[EOF-46]
}

const _Type_name = "SingleCharacterTokenStartLeftParenRightParenLeftBraceRightBraceCommaDotMinusPlusSemicolonSlashStarSingleCharacterTokenEndOneOrTwoCharacterTokenStartBangBangEqualEqualEqualEqualGreaterGreaterEqualLessLessEqualOneOrTwoCharacterTokenEndLiteralStartIdentifierStringNumberLiteralEndKeywordStartAndClassElseFalseFunForIfNilOrPrintReturnSuperThisTrueVarWhileKeywordEndEOF"

var _Type_index = [...]uint16{0, 25, 34, 44, 53, 63, 68, 71, 76, 80, 89, 94, 98, 121, 148, 152, 161, 166, 176, 183, 195, 199, 208, 233, 245, 255, 261, 267, 277, 289, 292, 297, 301, 306, 309, 312, 314, 317, 319, 324, 330, 335, 339, 343, 346, 351, 361, 364}

func (i Type) String() string {
	if i < 0 || i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
